openapi: 3.0.0
info:
  title: Developers Italia API
  version: 1.0.0
  x-summary: Developers Italia API
  description: |
    The API of Developers Italia

    ### <a name="terms-of-service"></a> Terms of service
    This API is open to use. While we normally rate limit the service, we reserve to block any
    potential malicious misuse of the API.

    Be nice.
  license:
    name: Apache
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
  contact:
    email: contatti@developers.italia.it
    url: 'https://developers.italia.it/en/contacts'
    name: Developers Italia
  x-api-id: 0f9ca6b0-db47-11ec-96f7-d8bbc146d165
  termsOfService: 'https://developers.italia.it/en/api/developers-italia#terms-of-service'
servers:
  - url: 'https://api.developers.italia.it/v1'
    description: The production server
tags:
  - name: software
    description: Operations on software
  - name: bundles
    description: Operations on bundles
  - name: logs
    description: Operations on logs
  - name: publishers
    description: Operations on publishers
  - name: monitor
    description: Monitoring operations on the API
  - name: webhooks
    description: Operations on webhooks
paths:
  /status:
    get:
      summary: Get the API status
      description: Get the API status
      tags:
        - monitor
      operationId: get-status
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /software:
    get:
      summary: List all software
      description: This endpoint allows you to list all the active Software
      tags:
        - software
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Software'
                  links:
                    $ref: '#/components/schemas/Links'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      operationId: get-software
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: all
          description: 'Show all software, even the one with "active" set to false'
        - schema:
            type: integer
            format: int32
            example: 100
            minimum: 1
            maximum: 100
            default: 25
          in: query
          name: 'page[size]'
          description: Limit the amount of results
        - schema:
            type: string
          in: query
          name: 'page[before]'
          description: Only results before this cursor
        - schema:
            type: string
          in: query
          name: 'page[after]'
          description: Only results after this cursor
        - schema:
            type: string
            format: date-time
            example: '2022-06-07T09:56:23Z'
          in: query
          name: from
          description: Only software created after this time (RFC 3339 datetime)
        - schema:
            type: string
            format: date-time
            example: '2022-06-07T14:56:23Z'
          in: query
          name: to
          description: Only software created before this time (RFC 3339 datetime)
    post:
      summary: Create a new Software
      description: Create a new Software
      tags:
        - software
      security:
        - bearerAuth: []
      operationId: post-software
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Software'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Software'
            examples: {}
  '/software/{softwareId}':
    parameters:
      - schema:
          type: string
        name: softwareId
        in: path
        required: true
    get:
      summary: Get a Software
      description: Get a Software from its id
      tags:
        - software
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Software'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      operationId: get-software-softwareId
    patch:
      summary: Update a Software
      description: Update a Software by its id
      tags:
        - software
      security:
        - bearerAuth: []
      operationId: patch-software-softwareId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Software'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      requestBody:
        required: true
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Software'
    delete:
      summary: Delete a Software
      description: Delete a Sofware by its id
      tags:
        - software
      security:
        - bearerAuth: []
      operationId: delete-software-softwareId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  '/software/{softwareId}/logs':
    parameters:
      - schema:
          type: string
        name: softwareId
        in: path
        required: true
    get:
      summary: List all Logs for a Software
      description: List all Logs for a Software by its id
      tags:
        - logs
        - software
      operationId: get-software-softwareId-logs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Log'
                  links:
                    $ref: '#/components/schemas/Links'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      parameters:
        - schema:
            type: integer
            format: int32
            default: 25
            example: 100
            minimum: 1
            maximum: 100
          in: query
          name: 'page[size]'
          description: Limit the amount of results
        - schema:
            type: string
          in: query
          name: 'page[before]'
          description: Only results before this cursor
        - schema:
            type: string
          in: query
          name: 'page[after]'
          description: Only results after this cursor
        - schema:
            type: string
            format: date-time
            example: '2022-06-07T09:56:23Z'
          in: query
          name: from
          description: Only logs after this time (ISO 8601 datetime)
        - schema:
            type: string
            format: date-time
            example: '2022-06-07T14:56:23Z'
          in: query
          name: to
          description: Only logs before this time (ISO 8601 datetime)
    post:
      summary: Create Logs for a Software
      description: Create Logs for a Software by its id
      tags:
        - logs
        - software
      security:
        - bearerAuth: []
      operationId: post-software-softwareId-logs
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Log'
  /software/webhooks:
    get:
      summary: List all Webhooks for Software
      description: List all Webhooks
      tags:
        - webhooks
        - software
      security:
        - bearerAuth: []
      operationId: get-software-webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Webhook'
                  links:
                    $ref: '#/components/schemas/Links'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      parameters:
        - schema:
            type: integer
            format: int32
            default: 25
            example: 100
            minimum: 1
            maximum: 100
          in: query
          name: 'page[size]'
          description: Limit the amount of results
        - schema:
            type: string
          in: query
          name: 'page[before]'
          description: Only results before this cursor
        - schema:
            type: string
          in: query
          name: 'page[after]'
          description: Only results after this cursor
        - schema:
            type: string
            format: date-time
            example: '2022-06-07T09:56:23Z'
          in: query
          name: from
          description: Only webhooks created after this time (RFC 3339 datetime)
        - schema:
            type: string
            format: date-time
            example: '2022-06-07T14:56:23Z'
          in: query
          name: to
          description: Only webhooks created before this time (RFC 3339 datetime)
    post:
      summary: Create Webhook for Software
      description: Create Webhook for Software
      tags:
        - webhooks
        - software
      security:
        - bearerAuth: []
      operationId: post-software-webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      callbacks:
        create:
          $ref: '#/components/callbacks/ResourceCreate'
        update:
          $ref: '#/components/callbacks/ResourceUpdate'
        delete:
          $ref: '#/components/callbacks/ResourceDelete'
  '/software/{softwareId}/webhooks':
    parameters:
      - schema:
          type: string
        name: softwareId
        in: path
        required: true
    get:
      summary: List all Webhooks for a Software
      description: List all Webhooks
      tags:
        - webhooks
        - software
      security:
        - bearerAuth: []
      operationId: get-software-softwareId-webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Webhook'
                  links:
                    $ref: '#/components/schemas/Links'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      parameters:
        - schema:
            type: integer
            format: int32
            default: 25
            example: 100
            minimum: 1
            maximum: 100
          in: query
          name: 'page[size]'
          description: Limit the amount of results
        - schema:
            type: string
          in: query
          name: 'page[before]'
          description: Only results before this cursor
        - schema:
            type: string
          in: query
          name: 'page[after]'
          description: Only results after this cursor
        - schema:
            type: string
            format: date-time
            example: '2022-06-07T09:56:23Z'
          in: query
          name: from
          description: Only webhooks created after this time (ISO 8601 datetime)
        - schema:
            type: string
            format: date-time
            example: '2022-06-07T14:56:23Z'
          in: query
          name: to
          description: Only webhooks created before this time (ISO 8601 datetime)
    post:
      summary: Create Webhook for a Software
      description: Create Webhook for a Software by its id
      tags:
        - webhooks
        - software
      security:
        - bearerAuth: []
      operationId: post-software-softwareId-webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      callbacks:
        create:
          $ref: '#/components/callbacks/ResourceCreate'
        update:
          $ref: '#/components/callbacks/ResourceUpdate'
        delete:
          $ref: '#/components/callbacks/ResourceDelete'
  /bundles:
    get:
      summary: List all Bundles
      description: List all Bundles
      tags:
        - bundles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bundle'
                  links:
                    $ref: '#/components/schemas/Links'
        '400':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      operationId: get-bundles
    post:
      summary: Create a Bundle
      description: Create a Bundle
      tags:
        - bundles
      security:
        - bearerAuth: []
      operationId: post-bundles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bundle'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bundle'
            examples: {}
  '/bundle/{bundleId}':
    parameters:
      - schema:
          type: string
        name: bundleId
        in: path
        required: true
    get:
      summary: Get a Bundle
      description: Get a Bundle by its id
      tags:
        - bundles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bundle'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      operationId: get-bundle-bundleId
    patch:
      summary: Update a Bundle
      description: Update a Bundle by its id
      tags:
        - bundles
      security:
        - bearerAuth: []
      operationId: patch-bundle-bundleId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Software'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      requestBody:
        required: true
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Bundle'
    delete:
      summary: Delete a Bundle
      description: Delete a Bundle by its id
      tags:
        - bundles
      security:
        - bearerAuth: []
      operationId: delete-bundle-bundleId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /logs:
    get:
      summary: List all Logs
      description: List all Logs
      tags:
        - logs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Log'
                  links:
                    $ref: '#/components/schemas/Links'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      operationId: get-logs
      parameters:
        - schema:
            type: integer
            format: int32
            example: 100
            minimum: 1
            maximum: 100
            default: 25
          in: query
          name: 'page[size]'
          description: Limit the amount of results
        - schema:
            type: string
          in: query
          name: 'page[before]'
          description: Only results before this cursor
        - schema:
            type: string
          in: query
          name: 'page[after]'
          description: Only results after this cursor
        - schema:
            type: string
            format: date-time
            example: '2022-06-07T09:56:23Z'
          in: query
          name: from
          description: Only logs after this time (RFC 3339 datetime)
        - schema:
            type: string
            format: date-time
            example: '2022-06-07T14:56:23Z'
          in: query
          name: to
          description: Only logs before this time (RFC 3339 datetime)
    post:
      summary: Create Logs
      description: Create Logs
      tags:
        - logs
      security:
        - bearerAuth: []
      operationId: post-logs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Log'
  /publishers:
    get:
      summary: List all Publishers
      description: List all active Publishers
      tags:
        - publishers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Publisher'
                  links:
                    $ref: '#/components/schemas/Links'
        '400':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      operationId: get-publishers
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: all
          description: 'Show all publishers, even the one with "active" set to false'
    post:
      summary: Create a new Publisher
      description: Create a new Publisher
      tags:
        - publishers
      security:
        - bearerAuth: []
      operationId: post-publishers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  '/publishers/{publisherId}':
    parameters:
      - schema:
          type: string
        name: publisherId
        in: path
        required: true
    get:
      summary: Get a Publisher
      description: Get a Publisher by its id
      tags:
        - publishers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      operationId: get-publishers-publisherId
    patch:
      summary: Update a Publisher
      description: Update a Publisher by its id
      tags:
        - publishers
      security:
        - bearerAuth: []
      operationId: patch-publishers-publisherId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      requestBody:
        required: true
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Publisher'
    delete:
      summary: Delete a Publisher
      description: Delete a Publisher by its id
      tags:
        - publishers
      security:
        - bearerAuth: []
      operationId: delete-publishers-publisherId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
  /publishers/webhooks:
    get:
      summary: List all Webhooks for Publishers
      description: List all Webhooks
      tags:
        - webhooks
        - publishers
      security:
        - bearerAuth: []
      operationId: get-publishers-webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Webhook'
                  links:
                    $ref: '#/components/schemas/Links'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      parameters:
        - schema:
            type: integer
            format: int32
            default: 25
            example: 100
            minimum: 1
            maximum: 100
          in: query
          name: 'page[size]'
          description: Limit the amount of results
        - schema:
            type: string
          in: query
          name: 'page[before]'
          description: Only results before this cursor
        - schema:
            type: string
          in: query
          name: 'page[after]'
          description: Only results after this cursor
        - schema:
            type: string
            format: date-time
            example: '2022-06-07T09:56:23Z'
          in: query
          name: from
          description: Only webhooks created after this time (RFC 3339 datetime)
        - schema:
            type: string
            format: date-time
            example: '2022-06-07T14:56:23Z'
          in: query
          name: to
          description: Only webhooks created before this time (RFC 3339 datetime)
    post:
      summary: Create Webhook for Publishers
      description: Create Webhook for Publishers
      tags:
        - webhooks
        - publishers
      security:
        - bearerAuth: []
      operationId: post-publishers-webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      callbacks:
        create:
          $ref: '#/components/callbacks/ResourceCreate'
        update:
          $ref: '#/components/callbacks/ResourceUpdate'
        delete:
          $ref: '#/components/callbacks/ResourceDelete'
  '/publishers/{publisherId}/webhooks':
    parameters:
      - schema:
          type: string
        name: publisherId
        in: path
        required: true
    get:
      summary: List all Webhooks for a Publisher
      description: List all Webhooks
      tags:
        - webhooks
        - publishers
      security:
        - bearerAuth: []
      operationId: get-publishers-publisherId-webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Webhook'
                  links:
                    $ref: '#/components/schemas/Links'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      parameters:
        - schema:
            type: integer
            format: int32
            default: 25
            example: 100
            minimum: 1
            maximum: 100
          in: query
          name: 'page[size]'
          description: Limit the amount of results
        - schema:
            type: string
          in: query
          name: 'page[before]'
          description: Only results before this cursor
        - schema:
            type: string
          in: query
          name: 'page[after]'
          description: Only results after this cursor
        - schema:
            type: string
            format: date-time
            example: '2022-06-07T09:56:23Z'
          in: query
          name: from
          description: Only webhooks created after this time (RFC 3339 datetime)
        - schema:
            type: string
            format: date-time
            example: '2022-06-07T14:56:23Z'
          in: query
          name: to
          description: Only webhooks created before this time (RFC 3339 datetime)
    post:
      summary: Create Webhook for a Publisher
      description: Create Webhook for a Publisher by its id
      tags:
        - webhooks
        - publishers
      security:
        - bearerAuth: []
      operationId: post-publishers-publisherId-webhooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      callbacks:
        create:
          $ref: '#/components/callbacks/ResourceCreate'
        update:
          $ref: '#/components/callbacks/ResourceUpdate'
        delete:
          $ref: '#/components/callbacks/ResourceDelete'
  '/webhooks/{webhookId}':
    parameters:
      - schema:
          type: string
        name: webhookId
        in: path
        required: true
    get:
      summary: Get a Webhook
      description: Get a Webhook from its id
      tags:
        - webhooks
      security:
        - bearerAuth: []
      operationId: get-webhook-webhookId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
    patch:
      summary: Update a Webhook
      description: Update a Webhook by its id
      tags:
        - webhooks
      security:
        - bearerAuth: []
      operationId: patch-webhooks-webhookId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      requestBody:
        required: true
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Webhook'
    delete:
      summary: Delete a Webhook
      description: Delete a Webhook by its id
      tags:
        - webhooks
      security:
        - bearerAuth: []
      operationId: delete-webhooks-webhookId
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
components:
  callbacks:
    ResourceCreate:
      '{$request.body#/url}':
        post:
          description: The webhook called when a new resource is created
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    event:
                      type: string
                      description: The type of event that triggered the webhook (always "create")
                      enum: [create]
                    subject:
                      type: string
                      description: The resource the event occurred on
                      example: "/software/0000-1111-2222-3333"
                  required:
                    - event
                    - subject
          responses:
            '200':
              description: Callback successfully processed
    ResourceUpdate:
      '{$request.body#/url}':
        post:
          description: The webhook called when a resource is updated
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    event:
                      type: string
                      description: The type of event that triggered the webhook (always "update")
                      enum: [update]
                    subject:
                      type: string
                      description: The resource the event occurred on
                      example: "/software/0000-1111-2222-3333"
                  required:
                    - event
                    - subject
          responses:
            '200':
              description: Callback successfully processed
    ResourceDelete:
      '{$request.body#/url}':
        post:
          description: The webhook called when a resource is deleted
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    event:
                      type: string
                      description: The type of event that triggered the webhook (always "delete")
                      enum: [delete]
                    subject:
                      type: string
                      description: The resource the event occurred on
                      example: "/software/0000-1111-2222-3333"
                  required:
                    - event
                    - subject
          responses:
            '200':
              description: Callback successfully processed

  responses:
    NoContent:
      description: No Content
    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    TooManyRequests:
      description: Too Many Requests
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Software:
      title: Software
      type: object
      properties:
        id:
          type: string
          readOnly: true
        publiccodeYml:
          type: string
        urls:
          type: array
          items:
            type: string
        active:
          type: boolean
          description: >
            Whether this Software is active or not. This is useful to temporarly disable
            software (fe. when the repository is empty or there's something malicious going on,
            but the problem is expected to be fixed in the near future) without removing it.
          default: true
        createdAt:
          type: string
          format: date-time
          example: '2022-06-07T14:56:23Z'
          description: The time the log was created (RFC 3339 datetime)
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: '2022-06-07T14:56:23Z'
          description: The time the log was updated (RFC 3339 datetime)
          readOnly: true
    Publisher:
      title: Publisher
      type: object
      properties:
        codeHosting:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                format: uri
                example: 'http://www.example.com'
        description:
          type: string
        email:
          type: string
          format: email
          example: example@example.com
        active:
          type: boolean
          description: |
            Whether this Publisher is active or not. This is useful to temporarly disable
            publishers (fe. when they are not complying with some rule, but the problem is
            expected to be fixed in the near future) without removing them.
          default: true
    Log:
      title: Log
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date-time
          example: '2022-06-07T14:56:23Z'
          description: The time the log was created (RFC 3339 datetime)
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: '2022-06-07T14:56:23Z'
          description: The time the log was updated (RFC 3339 datetime)
          readOnly: true
        message:
          type: string
        entity:
          type: string
          readOnly: true
      required:
        - id
        - createdAt
        - updatedAt
        - message
    Bundle:
      title: Bundle
      type: object
      properties:
        id:
          type: string
    Links:
      type: object
      x-examples: {}
      properties:
        prev:
          type: string
          readOnly: true
          nullable: true
        next:
          type: string
          readOnly: true
          nullable: true
      required:
        - prev
        - next
      readOnly: true
    Error:
      type: object
      x-examples:
        example-1:
          title: Can't create Software
          detail: Invalid JSON
          status: 400
        example-2:
          title: Can't create Log
          detail: Validation error
          status: 422
          validationErrors:
            - field: message
              rule: required
              providedValue: ''
      properties:
        title:
          type: string
          description: 'Short, human-readable summary of the problem'
        detail:
          type: string
          description: Human-readable explanation of the problem
        validationErrors:
          type: array
          description: 'List of validation errors, returned by endpoints that validate input data (eg. POST, PATCH, etc.)'
          items:
            type: object
            description: Details of the occurred validation error
            properties:
              field:
                type: string
                description: Field name with a validation error
                example: name
              rule:
                type: string
                description: Rule that makes the provided field invalid
                example: required
              providedValue:
                type: string
                description: |
                  The invalid value provided
                example: '""'
            required:
              - field
              - rule
              - providedValue
      required:
        - title
        - detail
    Webhook:
      title: Webhook
      type: object
      properties:
        id:
          type: string
          writeOnly: true
        url:
          type: string
          format: uri
          example: 'https://example.org/my-webhook-endpoint'
          description: URL where the webhook payload will be delivered to
        secret:
          type: string
          description: |
            Secret used to authenticate to the webhook endpoint
        createdAt:
          type: string
          description: The time the webhook was created (RFC 3339 datetime)
          format: date-time
          example: '2022-06-07T14:56:23Z'
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          example: '2022-06-07T14:56:23Z'
          description: The time the webhook was updated (RFC 3339 datetime)
          readOnly: true
      required:
        - id
        - url
        - createdAt
        - updatedAt
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: PASETO
